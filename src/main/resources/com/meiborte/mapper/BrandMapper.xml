<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--        namespace:名称空间          -->

<mapper namespace="com.meiborte.mapper.BrandMapper">

    <!--
        id:唯一标识
        type:映射类型,支持别名
    -->
    <resultMap id="brandResultMap" type="brand">
        <!--
            id:完成主键字段的映射
                column:数据库字段
                property:实体类属性
            result:完成一般字段的映射
                column:数据库字段
                property:实体类属性
        -->
        <result column="brand_name" property="brandName"/>
        <result column="company_name" property="companyName"/>
    </resultMap>

    <select id="selectAll" resultMap="brandResultMap">
        select * from tb_brand;
    </select>

<!--
    *参数占位符:
    1. #{}:会将其替换成?,为了防止SQL注入
    2. ${}:会产生SQL注入问题,不建议使用
    3.使用时机:
        1.当参数传递的时候,使用#{}
        2.当查询条件是不固定的时候,使用${},会出现SQL注入问题
    *参数类型:paramenterType:可以省略
    *特殊字符处理
        1.转义字符: < = &lt;
        2.CDATA区:<![CDATA[ ]]>
-->
<!--    <select id="selectById" resultMap="brandResultMap">-->
<!--        select * from tb_brand where id = #{id};-->
<!--    </select>-->

    <select id="selectById" resultMap="brandResultMap">
        select *
        from tb_brand where id
        <![CDATA[
            <
        ]]>
        #{id}
    </select>


    <!--
        条件查询
    -->
<!--    <select id="selectByCondition" resultMap="brandResultMap">-->
<!--            select *-->
<!--            from tb_brand-->
<!--            where status = #{status}-->
<!--              and company_name like #{companyName}-->
<!--              and brand_name like #{brandName}-->
<!--    </select>-->


    <!--
            动态条件查询
               * if: 条件判断
                  * test: 逻辑表达式
               * 问题:
                   * 恒等式
                   * <where> 替换 where 关键字
    -->
    <select id="selectByCondition" resultMap="brandResultMap">
        select *
        from tb_brand
--         where 1=1
        <where>
          <if test="status != null">
                status = #{status}
          </if>
          <if test="companyName != null and companyName != '' ">
                and company_name like #{companyName}
          </if>
          <if test="brandName != null and brandName != '' ">
                and brand_name like #{brandName}
          </if>
        </where>
    </select>


<!--    <select id="selectByConditionSingle" resultMap="brandResultMap">-->
<!--        select *-->
<!--        from tb_brand-->
<!--        where-->
<!--            <choose>&lt;!&ndash;相当于switch&ndash;&gt;-->
<!--                <when test="status != null">&lt;!&ndash;相当于case&ndash;&gt;-->
<!--                    status = #{status}-->
<!--                </when>-->
<!--                <when test="companyName != null and companyName != ''">&lt;!&ndash;相当于case&ndash;&gt;-->
<!--                    company_name like #{companyName}-->
<!--                </when>-->
<!--                <when test="brandName != null and brandName != ''">&lt;!&ndash;相当于case&ndash;&gt;-->
<!--                    brand_name like #{brandName}-->
<!--                </when>-->
<!--                <otherwise>-->
<!--                    1=1-->
<!--                </otherwise>-->
<!--            </choose>-->
<!--    </select>-->
    <select id="selectByConditionSingle" resultMap="brandResultMap">
        select *
        from tb_brand
        <where>
           <choose><!--相当于switch-->
               <when test="status != null"><!--相当于case-->
                    status = #{status}
                </when>
               <when test="companyName != null and companyName != ''"><!--相当于case-->
                     company_name like #{companyName}
               </when>
               <when test="brandName != null and brandName != ''"><!--相当于case-->
                     brand_name like #{brandName}
               </when>
            </choose>
        </where>
    </select>

    <insert id="add" useGeneratedKeys="true" keyProperty="id">
        insert into tb_brand(brand_name,company_name,ordered,description, status)
        values(#{brandName}, #{companyName}, #{ordered}, #{description}, #{status})
    </insert>

    <update id="update">
        update tb_brand
        <set>
            <if test="brandName != null and brandName != ''">
                brand_name = #{brandName},
            </if>
            <if test="companyName != null and companyName != ''">
                company_name = #{companyName},
            </if>
            <if test="ordered != null">
                ordered = #{ordered},
            </if>
            <if test="description != null and description != ''">
                description = #{description},
            </if>
            <if test="status != null">
                status = #{status}
            </if>
        </set>
        where id = #{id};
    </update>


    <delete id="deleteById">
        delete from tb_brand where id = #{id};
    </delete>

    <!--
        mybatis会将数组参数,封装为一个Map集合.
            * 默认: array = 数组
            * 使用@Param注解改变map集合的默认key的名称
    -->
    <delete id="deleteByIds">
        delete from tb_brand where id
        in
            <foreach collection="ids" item="id" separator="," open="(" close=")">
                #{id}
            </foreach>
        ;
    </delete>
</mapper>